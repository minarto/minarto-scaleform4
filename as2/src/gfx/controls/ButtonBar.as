/**
 * The ButtonBar is similar to the ButtonGroup although it has a visual representation. It is also able to create Button instances on the fly based on a DataProvider. The ButtonBar is useful for creating dynamic tab-bar like UI elements.
 
	<b>Inspectable Properties</b>
 	Although the ButtonBar component has no content (represented simply as a small circle on the Stage in Flash Studio), it does contain several inspectable properties. The majority of them deal with the placement settings of the Button instances created by the ButtonBar.<ul>
	<li><i>visible</i>: Hides the ButtonBar if set to false.</li>
	<li><i>disabled</i>: Disables the ButtonBar if set to true.</li>
	<li><i>itemRenderer</i>: Linkage ID of the Button component symbol. This symbol will be instantiated as needed based on the data assigned to the ButtonBar.</li>
	<li><i>direction</i>: Button placement. Horizontal will place the Button instances side-by-side, while vertical will stack them on top of each other.</li>
    <li><i>spacing</i>: The spacing between the Button instances. Affects only the current direction (see direction property).</li>
	<li><i>autoSize</i>: Determines if child buttons will scale to fit the text that it contains and which direction to align the resized buttons. Setting the autoSize property to {@code autoSize="none"} will leave the buttons' current size unchanged.</li>
	<li><i>buttonWidth</i>: Sets a common width to all Button instances. If autoSize is set to true this property is ignored.</li>
	<li><i>enableInitCallback</i>: If set to true, _global.CLIK_loadCallback() will be fired when a component is loaded and _global.CLIK_unloadCallback will be called when the component is unloaded. These methods receive the instance name, target path, and a reference the component as parameters.  _global.CLIK_loadCallback and _global.CLIK_unloadCallback should be overriden from the game engine using GFx FunctionObjects.</li></ul>
	
	<b>States</b>
	The CLIK ButtonBar does not have any visual states because its managed Button components are used to display the group state.
	
	<b>Events</b>
		All event callbacks receive a single Object parameter that contains relevant information about the event. The following properties are common to all events. <ul>
		<li><i>type</i>: The event type.</li>
		<li><i>target</i>: The target that generated the event.</li></ul>
		
	The events generated by the ButtonBar component are listed below. The properties listed next to the event are provided in addition to the common properties.<ul>
	<li><i>show</i>: The component’s visible property has been set to true at runtime.</li>
	<li><i>hide</i>: The component’s visible property has been set to false at runtime.</li>
	<li><i>focusIn</i>: The component has received focus.</li>
	<li><i>focusOut</i>: The component has lost focus.</li>
	<li><i>change</i>: A new button from the group has been selected.</li><ul>
		<li><i>index</i>: The selected index of the ButtonBar. Number type. Values 0 to number of buttons minus 1.</li>
		<li><i>renderer</i>: The selected Button. CLIK Button type.</li>
		<li><i>item</i>: The selected item from the dataProvider. AS2 Object type.</li>
		<li><i>data</i>: The data value of the selected dataProvider item. AS2 Object type.</li></ul></li>
	<li><i>itemClick</i>: A button in the group has been clicked.</li><ul>
		<li><i>index</i>: The ButtonBar index of the Button that was clicked. Number type. Values 0 to number of buttons minus 1. </li>
		<li><i>item</i>: The selected item from the dataProvider. AS2 Object type.</li>
		<li><i>data</i>: The data value of the selected dataProvider item. AS2 Object type.</li>
		<li><i>controllerIdx</i>: The index of the mouse cursor used to generate the event (applicable only for multi-mouse-cursor environments). Number type. Values 0 to 3.</li></ul></li></ul>
 
*/

/**************************************************************************

Filename    :   ButtonBar.as

Copyright   :   Copyright 2011 Autodesk, Inc. All Rights reserved.

Use of this software is subject to the terms of the Autodesk license
agreement provided at the time of installation or download, or which
otherwise accompanies this software in either electronic or hard copy form.

**************************************************************************/

import gfx.controls.Button;
import gfx.core.UIComponent;
import gfx.data.DataProvider;
import gfx.events.EventTypes;
import gfx.managers.FocusHandler;
import gfx.ui.InputDetails;
import gfx.ui.NavigationCode;

[InspectableList("disabled", "visible", "itemRenderer", "spacing", "autoSize", "buttonWidth", "direction", "enableInitCallback")]
class gfx.controls.ButtonBar extends UIComponent {
	
// Constants:

// Public Properties:

// Private Properties:
	private var _dataProvider;
	private var _itemRenderer:String = "Button";
	private var _spacing:Number = 0;
	private var _direction:String = "horizontal";
	private var _selectedIndex:Number = -1;
	private var _autoSize:String = "none";
	private var _buttonWidth:Number = 0;
	private var _labelField:String = "label";
	private var _labelFunction:Function;
	private var renderers:Array;
	private var reflowing:Boolean = false;
	
// UI Elements:
	

// Initialization:
	/**
	 * The constructor is called when a ButtonBar or a sub-class of ButtonBar is instantiated on stage or by using {@code UIComponent.createInstance()} in ActionScript. This component can <b>not</b> be instantiated using {@code new} syntax. When creating new components that extend ButtonBar, ensure that a {@code super()} call is made first in the constructor.
	 */
	public function ButtonBar() { 
		super();
		_dataProvider = [];
		renderers = [];
		focusEnabled = tabEnabled = !_disabled;
		tabChildren = false;
	}

// Public Methods:
	[Inspectable(defaultValue="false")]
	public function get disabled():Boolean { return _disabled; } 
	public function set disabled($v:Boolean):Void {
		super.disabled = $v;
		focusEnabled = tabEnabled = !$v;
		if (!initialized)	return;
		
		for (var i in renderers)	renderers[i].disabled = $v;
	}

	/**
	 * The list of buttons to display. Unlike list-based components, this is just an Array.  The Array can contain Objects or Strings, and the {@code itemToLabel} method will determine the resulting text label for each button.
	 * @see #itemToLabel
	 */
	public function get dataProvider() { return _dataProvider; }
	public function set dataProvider($v):Void {
		if (_dataProvider == $v)	return;
		if (_dataProvider)	_dataProvider.removeEventListener(EventTypes.CHANGE, this, "onDataChange");
		_dataProvider = $v;
		if (!$v)	return;
		
		// LM: I recommend that we move this check to the DataProvider.initialize(), and change it so it takes a second parameter (component instance).
		if (($v instanceof Array) && !$v.isDataProvider) { 
			DataProvider.initialize($v);
		} else if ($v.initialize) {
			$v.initialize(this);
		}
		
		$v.addEventListener(EventTypes.CHANGE, this, "onDataChange");  // Do a full redraw
		selectedIndex = 0;
		tabEnabled = focusEnabled = !_disabled && ($v.length > 0);
		
		reflowing = false;
		invalidate();
	}
	
	public function invalidateData():Void {
		selectedIndex = Math.min(_dataProvider ? _dataProvider.length-1 : 0, _selectedIndex);
		populateData();
		invalidate();
	}
	
	/**
	 * Set the linkage for each itemRenderer. When the linkage changes, the ButtonBar will be redrawn.
	 */
	[Inspectable(defaultValue="Button")]
	public function get itemRenderer():String { return _itemRenderer; }
	public function set itemRenderer(value:String):Void {
		_itemRenderer = value;
		// Empty button list so it redraws.
		while (renderers.length > 0) { renderers.pop().removeMovieClip(); }
		invalidate();
	}
	
	/**
	 * The spacing between each item in pixels. Spacing can be set to a negative value to overlap items.
	 */
	[Inspectable(defaultValue="0")]
	public function get spacing():Number { return _spacing; }
	public function set spacing(value:Number):Void {
		_spacing = value;
		invalidate();
	}
	
	/**
	 * The direction the buttons draw. When the direction is set to "horizontal", the buttons will draw on the same y-coordinate, with the {@code spacing} between each instance.  When the direction is set to "vertical", the buttons will draw with the same x-coordinate, with the {@code spacing} between each instance.
	 * @see #spacing
	 */
	[Inspectable(defaultValue="horizontal", type="list", enumeration="horizontal,vertical")]
	public function get direction():String { return _direction; }
	public function set direction(value:String):Void {
		_direction = value;
		invalidate();
	}
	
	/**
	 * Determines if the buttons auto-size to fit their label. This parameter will only be applied if the {@code itemRenderer} supports it.
	 */
	[Inspectable(type="String", enumeration="none,left,center,right", defaultValue="none")]
	public function get autoSize():String { return _autoSize; }
	public function set autoSize($v:String):Void {
		var i;
		
		if ($v == _autoSize)	return;
		_autoSize = $v;
		for (i in renderers)	renderers[i].autoSize = $v;
		invalidate();
	}	
	
	/**
	 * The width of each button.  Overrides the {@code autoSize} property when set.  Set to 0 to let the component auto-size.
	 */
	[Inspectable(defaultValue="0")]
	public function get buttonWidth():Number { return _buttonWidth; }
	public function set buttonWidth(value:Number):Void {
		_buttonWidth = value;
		invalidate();
	}
	
	/**
	 * The 0-base index of the selected button. The ButtonBar can have a single selected item in its {@code dataProvider}, represented by the {@code selectedIndex}. When the {@code selectedIndex} changes, a "change" event is dispatched.
	 */
	public function get selectedIndex():Number { return _selectedIndex; }
	public function set selectedIndex($v:Number):Void {
		if ($v < - 1 || isNaN($v))	$v = - 1;
		if (_selectedIndex == $v) return;
		_selectedIndex = $v;
		selectItem($v);
		dispatchEventAndSound({type:EventTypes.CHANGE, index:$v, renderer:renderers[$v], item:selectedItem, data:selectedItem.data});
	}
	
	/**
	 * The item at the {@code selectedIndex} in the DataProvider.
	 */
	public function get selectedItem() { return _dataProvider.requestItemAt(_selectedIndex); }
	
	/**
	 * The {@code data} property of the {@code selectedItem}.
	 * @see Button#data
	 */
	public function get data() { return selectedItem.data; }
	
	/**
	 * The name of the field in the {@code dataProvider} model to be displayed as the label for itemRenderers.  A {@code labelFunction} will be used over a {@code labelField} if it is defined.
	 */
	public function get labelField():String { return _labelField; }
	public function set labelField(value:String):Void {
		_labelField = value;
		invalidate();
	}
	
	/**
	 * The function used to determine the label for itemRenderers. A {@code labelFunction} will override a {@code labelField} if it is defined.
	 */
	public function get labelFunction():Function { return _labelFunction; }
	public function set labelFunction(value:Function):Void {
		_labelFunction = value;
		invalidate();
	}
	
	/**
	 * Convert an item to a label string using the {@code labelField} and {@code labelFunction}. If the item is not an object, then it will be converted to a string, and returned.
	 * @param item The item to convert to a label.
	 * @returns The converted label string.
	 * @see #labelField
	 * @see #labelFunction
	 */
	public function itemToLabel(item):String {
		if (!item)	return "";
		
		if (_labelFunction)	return _labelFunction(item);
		else if (_labelField && item[_labelField])	return item[_labelField];
		return item.toString();
	}
	
	public function handleInput(details:InputDetails, pathToFocus:Array):Boolean {		
		var keyPress:Boolean = (details.value == "keyDown" || details.value == "keyHold"), newIndex:Number;
		
		switch (details.navEquivalent) {
			case NavigationCode.LEFT:
				if (_direction == "horizontal")	newIndex = _selectedIndex-1;
				break;
			case NavigationCode.RIGHT:
				if (_direction == "horizontal")	newIndex = _selectedIndex+1;
				break;
			case NavigationCode.UP:
				if (_direction == "vertical")	newIndex = _selectedIndex-1;
				break;
			case NavigationCode.DOWN:				
				if (_direction == "vertical")	newIndex = _selectedIndex+1;
				break;
		}
		
		if (newIndex) {
			newIndex = Math.max(0, Math.min(_dataProvider ? _dataProvider.length-1 : 0, newIndex));			
			if (newIndex != _selectedIndex) { 
				if (!keyPress)	return true;
				selectedIndex = newIndex;
				return true;
			}
		}
		return false;
	}
	
	
// Private Methods:	
	private function draw():Void {
		var l:Number, r:MovieClip;
		
		if (!reflowing) {
			// Update current buttons
			l = _dataProvider.length;
			while (renderers.length > l) {
				r = MovieClip(renderers.pop());
				r.group.removeButton(r);	
				r.removeMovieClip();
			}		
			while (renderers.length < l)	renderers.push(createRenderer(renderers.length));
		
			populateData();
			reflowing = true;
			invalidate();
			return;
		}
		if (drawLayout() && _selectedIndex > -1)	selectItem(_selectedIndex);
	}
	
	private function drawLayout():Boolean {
		var i:Number, l:Number = renderers.length, w:Number, h:Number, r:MovieClip;
		
		if (l > 0 && !renderers[l-1].initialized) {
			reflowing = true;
			invalidate();
			return false;
		}
		reflowing = false;
		
		w = 0;
		h = 0;
		for (i=0; i<l; ++i) {
			r = renderers[i];
			// Manually size the renderer
			if (_autoSize == "none" && _buttonWidth > 0) {				
				r.width = _buttonWidth;
			}
			
			if (_direction == "horizontal") {
				r._y = 0;
				r._x = w;
				w += r.width + _spacing;
			} else {
				r._x = 0;
				r._y = h;
				h += r.height + _spacing;
			}
		}
		return true;
	}
	
	private function createRenderer(index:Number):MovieClip {
		var r:MovieClip = attachMovie(itemRenderer, "clip" + index, getNextHighestDepth(), { toggle:true, focusTarget:this, tabEnabled:false, autoSize:_autoSize } );
		
		if (!r)	return r;
		
		r.addEventListener(EventTypes.CLICK, this, "handleItemClick");
		r["index"] = index;
		
		// This assumes linkage is a Button, or has Button in its inheritance chain.
		r.groupName = _name+"ButtonGroup";

		return r;
	}
	
	private function handleItemClick($e):Void {
		var index:Number = $e.target.index;
		
		selectedIndex = index;
		dispatchEventAndSound({type:EventTypes.ITEM_CLICK, data:selectedItem.data, item:selectedItem, index:index, controllerIdx:$e.controllerIdx});
	}
	
	private function selectItem(index:Number):Void {
		var l:Number = renderers.length, r:MovieClip, i:Number;
		
		if (l < 1)	return;
		
		for (i = 0; i<l; ++i++) {
			if (i == index)	continue;
			r = renderers[i];
			r.swapDepths(100 + i);
			r.displayFocus = false;
		}
		
		r = renderers[index];		
		if (!r.selected)	r.selected = true;
		r.swapDepths(1000);
		r.displayFocus = _focused;
	}
	
	private function changeFocus():Void {
		var r:MovieClip = renderers[_selectedIndex];
		
		if (!r)	return;
		r.displayFocus = _focused;
	}
	
	private function onDataChange($e):Void {
		invalidateData();
	}
	
	private function populateData():Void {
		var i, r:MovieClip, data;
		
		for (i in renderers) {
			r = renderers[i];
			data = _dataProvider[i];
			r.label = itemToLabel(data);
			r.data = data;
			r.disabled = _disabled;
		}		
	}
}
